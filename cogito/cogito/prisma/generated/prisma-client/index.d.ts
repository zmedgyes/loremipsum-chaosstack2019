// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  completedTest: (where?: CompletedTestWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  score: (where?: ScoreWhereInput) => Promise<boolean>;
  test: (where?: TestWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  answers: (
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Answer>;
  answersConnection: (
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AnswerConnectionPromise;
  completedTest: (where: CompletedTestWhereUniqueInput) => CompletedTestPromise;
  completedTests: (
    args?: {
      where?: CompletedTestWhereInput;
      orderBy?: CompletedTestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CompletedTest>;
  completedTestsConnection: (
    args?: {
      where?: CompletedTestWhereInput;
      orderBy?: CompletedTestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompletedTestConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionPromise;
  questions: (
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Question>;
  questionsConnection: (
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => QuestionConnectionPromise;
  score: (where: ScoreWhereUniqueInput) => ScorePromise;
  scores: (
    args?: {
      where?: ScoreWhereInput;
      orderBy?: ScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Score>;
  scoresConnection: (
    args?: {
      where?: ScoreWhereInput;
      orderBy?: ScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ScoreConnectionPromise;
  test: (where: TestWhereUniqueInput) => TestPromise;
  tests: (
    args?: {
      where?: TestWhereInput;
      orderBy?: TestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Test>;
  testsConnection: (
    args?: {
      where?: TestWhereInput;
      orderBy?: TestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TestConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (
    args: { data: AnswerUpdateInput; where: AnswerWhereUniqueInput }
  ) => AnswerPromise;
  updateManyAnswers: (
    args: { data: AnswerUpdateManyMutationInput; where?: AnswerWhereInput }
  ) => BatchPayloadPromise;
  upsertAnswer: (
    args: {
      where: AnswerWhereUniqueInput;
      create: AnswerCreateInput;
      update: AnswerUpdateInput;
    }
  ) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createCompletedTest: (data: CompletedTestCreateInput) => CompletedTestPromise;
  updateCompletedTest: (
    args: {
      data: CompletedTestUpdateInput;
      where: CompletedTestWhereUniqueInput;
    }
  ) => CompletedTestPromise;
  upsertCompletedTest: (
    args: {
      where: CompletedTestWhereUniqueInput;
      create: CompletedTestCreateInput;
      update: CompletedTestUpdateInput;
    }
  ) => CompletedTestPromise;
  deleteCompletedTest: (
    where: CompletedTestWhereUniqueInput
  ) => CompletedTestPromise;
  deleteManyCompletedTests: (
    where?: CompletedTestWhereInput
  ) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (
    args: { data: QuestionUpdateInput; where: QuestionWhereUniqueInput }
  ) => QuestionPromise;
  updateManyQuestions: (
    args: { data: QuestionUpdateManyMutationInput; where?: QuestionWhereInput }
  ) => BatchPayloadPromise;
  upsertQuestion: (
    args: {
      where: QuestionWhereUniqueInput;
      create: QuestionCreateInput;
      update: QuestionUpdateInput;
    }
  ) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createScore: (data: ScoreCreateInput) => ScorePromise;
  updateScore: (
    args: { data: ScoreUpdateInput; where: ScoreWhereUniqueInput }
  ) => ScorePromise;
  upsertScore: (
    args: {
      where: ScoreWhereUniqueInput;
      create: ScoreCreateInput;
      update: ScoreUpdateInput;
    }
  ) => ScorePromise;
  deleteScore: (where: ScoreWhereUniqueInput) => ScorePromise;
  deleteManyScores: (where?: ScoreWhereInput) => BatchPayloadPromise;
  createTest: (data: TestCreateInput) => TestPromise;
  updateTest: (
    args: { data: TestUpdateInput; where: TestWhereUniqueInput }
  ) => TestPromise;
  updateManyTests: (
    args: { data: TestUpdateManyMutationInput; where?: TestWhereInput }
  ) => BatchPayloadPromise;
  upsertTest: (
    args: {
      where: TestWhereUniqueInput;
      create: TestCreateInput;
      update: TestUpdateInput;
    }
  ) => TestPromise;
  deleteTest: (where: TestWhereUniqueInput) => TestPromise;
  deleteManyTests: (where?: TestWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  completedTest: (
    where?: CompletedTestSubscriptionWhereInput
  ) => CompletedTestSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  score: (
    where?: ScoreSubscriptionWhereInput
  ) => ScoreSubscriptionPayloadSubscription;
  test: (
    where?: TestSubscriptionWhereInput
  ) => TestSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompletedTestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface QuestionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  test?: TestWhereInput;
  answers_every?: AnswerWhereInput;
  answers_some?: AnswerWhereInput;
  answers_none?: AnswerWhereInput;
  correctAnswer?: AnswerWhereInput;
  AND?: QuestionWhereInput[] | QuestionWhereInput;
  OR?: QuestionWhereInput[] | QuestionWhereInput;
  NOT?: QuestionWhereInput[] | QuestionWhereInput;
}

export interface TestWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  questions_every?: QuestionWhereInput;
  questions_some?: QuestionWhereInput;
  questions_none?: QuestionWhereInput;
  AND?: TestWhereInput[] | TestWhereInput;
  OR?: TestWhereInput[] | TestWhereInput;
  NOT?: TestWhereInput[] | TestWhereInput;
}

export interface AnswerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  question?: QuestionWhereInput;
  AND?: AnswerWhereInput[] | AnswerWhereInput;
  OR?: AnswerWhereInput[] | AnswerWhereInput;
  NOT?: AnswerWhereInput[] | AnswerWhereInput;
}

export type CompletedTestWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CompletedTestWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  test?: TestWhereInput;
  score?: ScoreWhereInput;
  AND?: CompletedTestWhereInput[] | CompletedTestWhereInput;
  OR?: CompletedTestWhereInput[] | CompletedTestWhereInput;
  NOT?: CompletedTestWhereInput[] | CompletedTestWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ScoreWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  correctlyAnswered_every?: QuestionWhereInput;
  correctlyAnswered_some?: QuestionWhereInput;
  correctlyAnswered_none?: QuestionWhereInput;
  wronglyAnswered_every?: QuestionWhereInput;
  wronglyAnswered_some?: QuestionWhereInput;
  wronglyAnswered_none?: QuestionWhereInput;
  AND?: ScoreWhereInput[] | ScoreWhereInput;
  OR?: ScoreWhereInput[] | ScoreWhereInput;
  NOT?: ScoreWhereInput[] | ScoreWhereInput;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ScoreWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TestWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface AnswerCreateInput {
  text: String;
  question?: QuestionCreateOneWithoutAnswersInput;
}

export interface QuestionCreateOneWithoutAnswersInput {
  create?: QuestionCreateWithoutAnswersInput;
  connect?: QuestionWhereUniqueInput;
}

export interface QuestionCreateWithoutAnswersInput {
  text: String;
  test: TestCreateOneWithoutQuestionsInput;
  correctAnswer: AnswerCreateOneInput;
}

export interface TestCreateOneWithoutQuestionsInput {
  create?: TestCreateWithoutQuestionsInput;
  connect?: TestWhereUniqueInput;
}

export interface TestCreateWithoutQuestionsInput {
  name: String;
}

export interface AnswerCreateOneInput {
  create?: AnswerCreateInput;
  connect?: AnswerWhereUniqueInput;
}

export interface AnswerUpdateInput {
  text?: String;
  question?: QuestionUpdateOneWithoutAnswersInput;
}

export interface QuestionUpdateOneWithoutAnswersInput {
  create?: QuestionCreateWithoutAnswersInput;
  update?: QuestionUpdateWithoutAnswersDataInput;
  upsert?: QuestionUpsertWithoutAnswersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: QuestionWhereUniqueInput;
}

export interface QuestionUpdateWithoutAnswersDataInput {
  text?: String;
  test?: TestUpdateOneRequiredWithoutQuestionsInput;
  correctAnswer?: AnswerUpdateOneRequiredInput;
}

export interface TestUpdateOneRequiredWithoutQuestionsInput {
  create?: TestCreateWithoutQuestionsInput;
  update?: TestUpdateWithoutQuestionsDataInput;
  upsert?: TestUpsertWithoutQuestionsInput;
  connect?: TestWhereUniqueInput;
}

export interface TestUpdateWithoutQuestionsDataInput {
  name?: String;
}

export interface TestUpsertWithoutQuestionsInput {
  update: TestUpdateWithoutQuestionsDataInput;
  create: TestCreateWithoutQuestionsInput;
}

export interface AnswerUpdateOneRequiredInput {
  create?: AnswerCreateInput;
  update?: AnswerUpdateDataInput;
  upsert?: AnswerUpsertNestedInput;
  connect?: AnswerWhereUniqueInput;
}

export interface AnswerUpdateDataInput {
  text?: String;
  question?: QuestionUpdateOneWithoutAnswersInput;
}

export interface AnswerUpsertNestedInput {
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput;
  create: QuestionCreateWithoutAnswersInput;
}

export interface AnswerUpdateManyMutationInput {
  text?: String;
}

export interface CompletedTestCreateInput {
  user: UserCreateOneInput;
  test: TestCreateOneInput;
  score: ScoreCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  username: String;
}

export interface TestCreateOneInput {
  create?: TestCreateInput;
  connect?: TestWhereUniqueInput;
}

export interface TestCreateInput {
  name: String;
  questions?: QuestionCreateManyWithoutTestInput;
}

export interface QuestionCreateManyWithoutTestInput {
  create?: QuestionCreateWithoutTestInput[] | QuestionCreateWithoutTestInput;
  connect?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
}

export interface QuestionCreateWithoutTestInput {
  text: String;
  answers?: AnswerCreateManyWithoutQuestionInput;
  correctAnswer: AnswerCreateOneInput;
}

export interface AnswerCreateManyWithoutQuestionInput {
  create?:
    | AnswerCreateWithoutQuestionInput[]
    | AnswerCreateWithoutQuestionInput;
  connect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
}

export interface AnswerCreateWithoutQuestionInput {
  text: String;
}

export interface ScoreCreateOneInput {
  create?: ScoreCreateInput;
  connect?: ScoreWhereUniqueInput;
}

export interface ScoreCreateInput {
  correctlyAnswered?: QuestionCreateManyInput;
  wronglyAnswered?: QuestionCreateManyInput;
}

export interface QuestionCreateManyInput {
  create?: QuestionCreateInput[] | QuestionCreateInput;
  connect?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
}

export interface QuestionCreateInput {
  text: String;
  test: TestCreateOneWithoutQuestionsInput;
  answers?: AnswerCreateManyWithoutQuestionInput;
  correctAnswer: AnswerCreateOneInput;
}

export interface CompletedTestUpdateInput {
  user?: UserUpdateOneRequiredInput;
  test?: TestUpdateOneRequiredInput;
  score?: ScoreUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TestUpdateOneRequiredInput {
  create?: TestCreateInput;
  update?: TestUpdateDataInput;
  upsert?: TestUpsertNestedInput;
  connect?: TestWhereUniqueInput;
}

export interface TestUpdateDataInput {
  name?: String;
  questions?: QuestionUpdateManyWithoutTestInput;
}

export interface QuestionUpdateManyWithoutTestInput {
  create?: QuestionCreateWithoutTestInput[] | QuestionCreateWithoutTestInput;
  delete?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  connect?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  set?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  disconnect?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  update?:
    | QuestionUpdateWithWhereUniqueWithoutTestInput[]
    | QuestionUpdateWithWhereUniqueWithoutTestInput;
  upsert?:
    | QuestionUpsertWithWhereUniqueWithoutTestInput[]
    | QuestionUpsertWithWhereUniqueWithoutTestInput;
  deleteMany?: QuestionScalarWhereInput[] | QuestionScalarWhereInput;
  updateMany?:
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput;
}

export interface QuestionUpdateWithWhereUniqueWithoutTestInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutTestDataInput;
}

export interface QuestionUpdateWithoutTestDataInput {
  text?: String;
  answers?: AnswerUpdateManyWithoutQuestionInput;
  correctAnswer?: AnswerUpdateOneRequiredInput;
}

export interface AnswerUpdateManyWithoutQuestionInput {
  create?:
    | AnswerCreateWithoutQuestionInput[]
    | AnswerCreateWithoutQuestionInput;
  delete?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  connect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  set?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  disconnect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  update?:
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput;
  upsert?:
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput;
  deleteMany?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  updateMany?:
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput;
}

export interface AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutQuestionDataInput;
}

export interface AnswerUpdateWithoutQuestionDataInput {
  text?: String;
}

export interface AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutQuestionDataInput;
  create: AnswerCreateWithoutQuestionInput;
}

export interface AnswerScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  OR?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  NOT?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  text?: String;
}

export interface QuestionUpsertWithWhereUniqueWithoutTestInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutTestDataInput;
  create: QuestionCreateWithoutTestInput;
}

export interface QuestionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: QuestionScalarWhereInput[] | QuestionScalarWhereInput;
  OR?: QuestionScalarWhereInput[] | QuestionScalarWhereInput;
  NOT?: QuestionScalarWhereInput[] | QuestionScalarWhereInput;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  text?: String;
}

export interface TestUpsertNestedInput {
  update: TestUpdateDataInput;
  create: TestCreateInput;
}

export interface ScoreUpdateOneRequiredInput {
  create?: ScoreCreateInput;
  update?: ScoreUpdateDataInput;
  upsert?: ScoreUpsertNestedInput;
  connect?: ScoreWhereUniqueInput;
}

export interface ScoreUpdateDataInput {
  correctlyAnswered?: QuestionUpdateManyInput;
  wronglyAnswered?: QuestionUpdateManyInput;
}

export interface QuestionUpdateManyInput {
  create?: QuestionCreateInput[] | QuestionCreateInput;
  update?:
    | QuestionUpdateWithWhereUniqueNestedInput[]
    | QuestionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | QuestionUpsertWithWhereUniqueNestedInput[]
    | QuestionUpsertWithWhereUniqueNestedInput;
  delete?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  connect?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  set?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  disconnect?: QuestionWhereUniqueInput[] | QuestionWhereUniqueInput;
  deleteMany?: QuestionScalarWhereInput[] | QuestionScalarWhereInput;
  updateMany?:
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput;
}

export interface QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateDataInput;
}

export interface QuestionUpdateDataInput {
  text?: String;
  test?: TestUpdateOneRequiredWithoutQuestionsInput;
  answers?: AnswerUpdateManyWithoutQuestionInput;
  correctAnswer?: AnswerUpdateOneRequiredInput;
}

export interface QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface ScoreUpsertNestedInput {
  update: ScoreUpdateDataInput;
  create: ScoreCreateInput;
}

export interface QuestionUpdateInput {
  text?: String;
  test?: TestUpdateOneRequiredWithoutQuestionsInput;
  answers?: AnswerUpdateManyWithoutQuestionInput;
  correctAnswer?: AnswerUpdateOneRequiredInput;
}

export interface QuestionUpdateManyMutationInput {
  text?: String;
}

export interface ScoreUpdateInput {
  correctlyAnswered?: QuestionUpdateManyInput;
  wronglyAnswered?: QuestionUpdateManyInput;
}

export interface TestUpdateInput {
  name?: String;
  questions?: QuestionUpdateManyWithoutTestInput;
}

export interface TestUpdateManyMutationInput {
  name?: String;
}

export interface UserUpdateInput {
  username?: String;
}

export interface UserUpdateManyMutationInput {
  username?: String;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AnswerWhereInput;
  AND?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
  OR?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
  NOT?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
}

export interface CompletedTestSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompletedTestWhereInput;
  AND?:
    | CompletedTestSubscriptionWhereInput[]
    | CompletedTestSubscriptionWhereInput;
  OR?:
    | CompletedTestSubscriptionWhereInput[]
    | CompletedTestSubscriptionWhereInput;
  NOT?:
    | CompletedTestSubscriptionWhereInput[]
    | CompletedTestSubscriptionWhereInput;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: QuestionWhereInput;
  AND?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
  OR?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
  NOT?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
}

export interface ScoreSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ScoreWhereInput;
  AND?: ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput;
  OR?: ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput;
  NOT?: ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput;
}

export interface TestSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TestWhereInput;
  AND?: TestSubscriptionWhereInput[] | TestSubscriptionWhereInput;
  OR?: TestSubscriptionWhereInput[] | TestSubscriptionWhereInput;
  NOT?: TestSubscriptionWhereInput[] | TestSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  text: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  question: <T = QuestionPromise>() => T;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  question: <T = QuestionSubscription>() => T;
}

export interface Question {
  id: ID_Output;
  text: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  test: <T = TestPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  correctAnswer: <T = AnswerPromise>() => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  test: <T = TestSubscription>() => T;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  correctAnswer: <T = AnswerSubscription>() => T;
}

export interface Test {
  id: ID_Output;
  name: String;
}

export interface TestPromise extends Promise<Test>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  questions: <T = FragmentableArray<Question>>(
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TestSubscription
  extends Promise<AsyncIterator<Test>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompletedTest {
  id: ID_Output;
}

export interface CompletedTestPromise
  extends Promise<CompletedTest>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  test: <T = TestPromise>() => T;
  score: <T = ScorePromise>() => T;
}

export interface CompletedTestSubscription
  extends Promise<AsyncIterator<CompletedTest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  test: <T = TestSubscription>() => T;
  score: <T = ScoreSubscription>() => T;
}

export interface User {
  id: ID_Output;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface Score {
  id: ID_Output;
}

export interface ScorePromise extends Promise<Score>, Fragmentable {
  id: () => Promise<ID_Output>;
  correctlyAnswered: <T = FragmentableArray<Question>>(
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  wronglyAnswered: <T = FragmentableArray<Question>>(
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ScoreSubscription
  extends Promise<AsyncIterator<Score>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  correctlyAnswered: <T = Promise<AsyncIterator<QuestionSubscription>>>(
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  wronglyAnswered: <T = Promise<AsyncIterator<QuestionSubscription>>>(
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CompletedTestConnection {
  pageInfo: PageInfo;
  edges: CompletedTestEdge[];
}

export interface CompletedTestConnectionPromise
  extends Promise<CompletedTestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompletedTestEdge>>() => T;
  aggregate: <T = AggregateCompletedTestPromise>() => T;
}

export interface CompletedTestConnectionSubscription
  extends Promise<AsyncIterator<CompletedTestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompletedTestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompletedTestSubscription>() => T;
}

export interface CompletedTestEdge {
  node: CompletedTest;
  cursor: String;
}

export interface CompletedTestEdgePromise
  extends Promise<CompletedTestEdge>,
    Fragmentable {
  node: <T = CompletedTestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompletedTestEdgeSubscription
  extends Promise<AsyncIterator<CompletedTestEdge>>,
    Fragmentable {
  node: <T = CompletedTestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompletedTest {
  count: Int;
}

export interface AggregateCompletedTestPromise
  extends Promise<AggregateCompletedTest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompletedTestSubscription
  extends Promise<AsyncIterator<AggregateCompletedTest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScoreConnection {
  pageInfo: PageInfo;
  edges: ScoreEdge[];
}

export interface ScoreConnectionPromise
  extends Promise<ScoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScoreEdge>>() => T;
  aggregate: <T = AggregateScorePromise>() => T;
}

export interface ScoreConnectionSubscription
  extends Promise<AsyncIterator<ScoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScoreSubscription>() => T;
}

export interface ScoreEdge {
  node: Score;
  cursor: String;
}

export interface ScoreEdgePromise extends Promise<ScoreEdge>, Fragmentable {
  node: <T = ScorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScoreEdgeSubscription
  extends Promise<AsyncIterator<ScoreEdge>>,
    Fragmentable {
  node: <T = ScoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScore {
  count: Int;
}

export interface AggregateScorePromise
  extends Promise<AggregateScore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScoreSubscription
  extends Promise<AsyncIterator<AggregateScore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TestConnection {
  pageInfo: PageInfo;
  edges: TestEdge[];
}

export interface TestConnectionPromise
  extends Promise<TestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestEdge>>() => T;
  aggregate: <T = AggregateTestPromise>() => T;
}

export interface TestConnectionSubscription
  extends Promise<AsyncIterator<TestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestSubscription>() => T;
}

export interface TestEdge {
  node: Test;
  cursor: String;
}

export interface TestEdgePromise extends Promise<TestEdge>, Fragmentable {
  node: <T = TestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestEdgeSubscription
  extends Promise<AsyncIterator<TestEdge>>,
    Fragmentable {
  node: <T = TestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTest {
  count: Int;
}

export interface AggregateTestPromise
  extends Promise<AggregateTest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestSubscription
  extends Promise<AsyncIterator<AggregateTest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  text: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface CompletedTestSubscriptionPayload {
  mutation: MutationType;
  node: CompletedTest;
  updatedFields: String[];
  previousValues: CompletedTestPreviousValues;
}

export interface CompletedTestSubscriptionPayloadPromise
  extends Promise<CompletedTestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompletedTestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompletedTestPreviousValuesPromise>() => T;
}

export interface CompletedTestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompletedTestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompletedTestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompletedTestPreviousValuesSubscription>() => T;
}

export interface CompletedTestPreviousValues {
  id: ID_Output;
}

export interface CompletedTestPreviousValuesPromise
  extends Promise<CompletedTestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface CompletedTestPreviousValuesSubscription
  extends Promise<AsyncIterator<CompletedTestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  text: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface ScoreSubscriptionPayload {
  mutation: MutationType;
  node: Score;
  updatedFields: String[];
  previousValues: ScorePreviousValues;
}

export interface ScoreSubscriptionPayloadPromise
  extends Promise<ScoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScorePreviousValuesPromise>() => T;
}

export interface ScoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScorePreviousValuesSubscription>() => T;
}

export interface ScorePreviousValues {
  id: ID_Output;
}

export interface ScorePreviousValuesPromise
  extends Promise<ScorePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ScorePreviousValuesSubscription
  extends Promise<AsyncIterator<ScorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface TestSubscriptionPayload {
  mutation: MutationType;
  node: Test;
  updatedFields: String[];
  previousValues: TestPreviousValues;
}

export interface TestSubscriptionPayloadPromise
  extends Promise<TestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestPreviousValuesPromise>() => T;
}

export interface TestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestPreviousValuesSubscription>() => T;
}

export interface TestPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TestPreviousValuesPromise
  extends Promise<TestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TestPreviousValuesSubscription
  extends Promise<AsyncIterator<TestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Test",
    embedded: false
  },
  {
    name: "CompletedTest",
    embedded: false
  },
  {
    name: "Score",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
